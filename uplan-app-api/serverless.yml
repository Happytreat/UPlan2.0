# NOTE: update this with your service name
service: uplan-app-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless commands
  # or fall back to what we have set in the provider section
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  semTableName: ${self:custom.stage}-semesters
  modTableName: ${self:custom.stage}-Modules
  tagTableName: ${self:custom.stage}-tags

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-1
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    semTableName: ${self:custom.semTableName}
    modTableName: ${self:custom.modTableName}
    tagTableName: ${self:custom.tagTableName}
  # 'iamRoleStatements' defines the permission policy for the Lambda
  # function.
  # In this case Lambda functions are granted with permissions to
  # access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ SemestersTable, Arn ]
        - "Fn::GetAtt": [ ModulesTable, Arn ]
        - "Fn::GetAtt": [ TagsTable, Arn ]
      # Resource: "arn:aws:dynamodb:ap-southeast-1:985930350642:table/semesters"
      # Resource: "arn:aws:dynamodb:ap-southeast-1:*:*"
      # To load environment variables externally
      # rename env.example to env.yml and uncomment
      # the following line. Also, make sure to not
      # commit your env.yml.
      #
      #environment: ${file(env.yml):${self:provider.stage}}

# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

functions:
  createSemester:
    handler: services/semesters/createSemester.main
    events:
      - http:
          path: semesters
          method: post
          cors: true
          authorizer: aws_iam
  getSemester:
    handler: services/semesters/getSemester.main
    events:
      - http:
          path: semesters/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getSemesterList:
    handler: services/semesters/getSemesterList.main
    events:
      - http:
          path: semesters
          method: get
          cors: true
          authorizer: aws_iam
  updateSemester:
    handler: services/semesters/updateSemester.main
    events:
      - http:
          path: semesters/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteSemester:
    handler: services/semesters/deleteSemester.main
    events:
      - http:
          path: semesters/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  createModule:
    handler: services/modules/createModule.main
    events:
      - http:
          path: add-modules
          method: post
          cors: true
          authorizer: aws_iam
  getModule:
    handler: services/modules/getModule.main
    events:
      - http:
          path: get-module/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getModuleList:
    handler: services/modules/getModuleList.main
    events:
      - http:
          path: get-modules-list
          method: get
          cors: true
          authorizer: aws_iam
  updateModule:
    handler: services/modules/updateModule.main
    events:
      - http:
          path: update-modules
          method: put
          cors: true
          authorizer: aws_iam
  deleteModule:
    handler: services/modules/deleteModule.main
    events:
      - http:
          path: delete-module/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  createTag:
    handler: services/tags/createTag.main
    events:
      - http:
          path: add-tags
          method: post
          cors: true
          authorizer: aws_iam
  getTag:
    handler: services/tags/getTag.main
    events:
      - http:
          path: get-tags/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getTagList:
    handler: services/tags/getTagList.main
    events:
      - http:
          path: get-tags-list
          method: get
          cors: true
          authorizer: aws_iam
  updateTag:
    handler: services/tags/updateTag.main
    events:
      - http:
          path: update-tag/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteTag:
    handler: services/tags/deleteTag.main
    events:
      - http:
          path: delete-tag/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getUserInfo:
    handler: services/user/getUserInfo.main
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: aws_iam
